(defpackage :seasoned-schemer.ch12
  (:use :common-lisp)
  (:import-from :little-schemer.ch04 :pick))
(in-package :seasoned-schemer.ch12)

(defun multirember (a lat)
  (labels ((mr (lat)
             (cond ((null lat) nil)
                   ((eq a (car lat)) (mr (cdr lat)))
                   (t (cons (car lat) (mr (cdr lat)))))))
    (mr lat)))

(defun rember-f (test?)
  (lambda (a l)
    (cond ((null a) nil)
          ((funcall test? (car l) a) (cdr l))
          (t (cons (car l) (funcall (rember-f test?) a (cdr l)))))))

(defparameter rember-eq? (rember-f #'eq))

(defun multirember-f (test? a lat)
  (labels ((mr (lat)
             (cond ((null lat) nil)
                   ((funcall test? (car lat) a) (mr (cdr lat)))
                   (t (cons (car lat) (mr (cdr lat)))))))
    (mr lat)))

(defun member? (a lat)
  (labels ((m (l)
             (cond ((null l) nil)
                   ((eq (car l) a) t)
                   (t (m (cdr l))))))
    (m lat)))

(defun union* (s1 s2)
  (labels ((member? (a list)
             (labels ((m (l)
                        (cond ((null l) nil)
                              ((eq (car l) a) t)
                              (t (m (cdr l))))))
               (m list)))
           (u (s)
             (cond ((null s) s2)
                   ((member? (car s) s2) (u (cdr s)))
                   (t (cons (car s) (u (cdr s)))))))
    (u s1)))

(defun two-in-a-row? (lat)
  (labels ((go* (preceding l)
             (cond ((null l) nil)
                   (t (or (eq (car l) preceding)
                          (go* (car l) (cdr l)))))))
    (cond ((null lat) nil)
          (t (go* (car lat) (cdr lat))))))

(defun sum-of-prefixes (list)
  (labels ((s (l a)
             (cond ((null l) nil)
                   (t (cons (+ (car l) a)
                            (s (cdr l) (+ (car l) a)))))))
    (s list 0)))

(defun scramble (list)
  (labels ((s (l a)
             (cond ((null l) nil)
                   (t (cons (pick (car l) (cons (car l) a))
                            (s (cdr l) (cons (car l) a)))))))
    (s list nil)))
